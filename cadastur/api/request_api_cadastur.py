import os
import requests
from datetime import datetime
from dotenv import load_dotenv
from unidecode import unidecode

# carrega as vari√°veis de ambientes no script
load_dotenv()

# carrega a vari√°vel de ambiente no script
URL_CADASTUR = os.environ.get("URL_CADASTUR")
ORIGIN_CADASTUR = os.environ.get("ORIGIN_CADASTUR")

def formata_cnpj(cnpj:str=None):
    """Retorna o CNPJ Formatado no formato Brasileiro"""
    cnpj = str(cnpj)
    if len(cnpj) == 14:
        return f"{cnpj[:2]}.{cnpj[2:5]}.{cnpj[5:8]}/{cnpj[8:12]}-{cnpj[12:]}"
    else:
        return cnpj

def formata_data(int_data:int):
    """Retorna a data no formato Brasileiro"""
    if int_data:
        parse_data = datetime.fromtimestamp(int_data / 1e3)
        format_data = parse_data.strftime("%d-%m-%Y")
        return format_data
    else:
        return int_data
    

def formata_telefone(telefone):
    """Retorna o telefone Formatado no formato Brasileiro"""
    telefone = str(telefone)
    if len(telefone) == 10:
        return f"{telefone[:2]} {telefone[2:6]}-{telefone[6:]}"
    elif len(telefone) == 11:
        return f"{telefone[:2]} {telefone[2:7]}-{telefone[7:]}"
    else:
        return telefone

def formata_url_prestador(id):
    """Formata a url para api no cadastur"""
    id = str(id)
    if id:
        url = f"https://cadastur.turismo.gov.br/cadastur-backend/rest/portal/prestador/{id}/tipoPrestador/PJ"
    else:
        url = id
    return url

def formata_bairro_e_cidade(bairro_cidade):
    if bairro_cidade:
        bairro_cidade = str(bairro_cidade).upper()
        bairro_cidade = unidecode(bairro_cidade)
    return bairro_cidade

def get_cadastur(page:int=1, page_size:int=30000, campo_ordenacao:str="noBairro", 
                 orderby:str="ASC", prestador:str="", cod_local:int=None, 
                 atividade_turistica:str="Restaurante, Cafeteria, Bar e Similares",
                 sou_prestador:bool=False, sou_turista:bool=True, cidade_uf:str="Lagoa Santa, MG",
                 id_uf:int=None, possui_veiculo:str=""):

    """
    Filtros:

    - `noPrestador`: Nome do prestador de servi√ßo.
    - `localidade`: C√≥digo da localidade.
    - `nuAtividadeTuristica`: Tipo de atividade tur√≠stica, como "Restaurante, Cafeteria, Bar e Similares".
    - `souPrestador`: Indica se o usu√°rio √© um prestador de servi√ßos.
    - `souTurista`: Indica se o usu√°rio √© um turista.
    - `localidadesUfs`: Localidades e unidades federativas, como "S√£o Paulo, SP".
    - `localidadeNuUf`: N√∫mero da unidade federativa.
    - `flPossuiVeiculo`: Indica se o prestador possui ve√≠culo.

    Voc√™ pode usar esses campos para filtrar os resultados da sua chamada de API. Por exemplo, se voc√™ quiser apenas resultados de prestadores de servi√ßos em S√£o Paulo que possuem ve√≠culos, voc√™ pode definir os campos `localidadesUfs` e `flPossuiVeiculo` de acordo. üòä
    """
    # URL no .env
    url = URL_CADASTUR

    # Par√¢metros e filtros
    params = {
        "currentPage": page,
        "pageSize": page_size,
        "sortFields": campo_ordenacao,
        "sortDirections": orderby,
        "filtros": {
            "noPrestador": prestador,
            "localidade": cod_local,
            "nuAtividadeTuristica": atividade_turistica,
            "souPrestador": sou_prestador,
            "souTurista": sou_turista,
            "localidadesUfs": cidade_uf,
            "localidadeNuUf": id_uf,
            "flPossuiVeiculo": possui_veiculo
        }
    }

    # Cabe√ßalho da requisi√ß√£o
    headers = {
        "accept": "application/json, text/plain, */*",
        "content-type": "application/json;charset=UTF-8",
        "origin": ORIGIN_CADASTUR,
        "referer": f"{ORIGIN_CADASTUR}/",
    }

    response = requests.post(url, headers=headers, json=params)

    # Formata o json de retorno
    data = response.json()["list"]
    base = []
    for d in data:
        base.append({
            "CNPJ": str(d.get("numeroCadastro", "")),
            "CNPJ_FORMATADO": formata_cnpj(d.get("numeroCadastro", "")),
            "NOME_FANTASIA" : str(d.get("nomePrestador", "")),
            "RAZAO_SOCIAL" : str(d.get("registroRf", "")),
            "INICIO_VIGENCIA": formata_data(d.get("dtInicioVigencia", 0)),
            "FIM_VIGENCIA": formata_data(d.get("dtFimVigencia", 0)),
            "SITE": d.get("noWebSite", ""),
            "TELEFONE": formata_telefone(d.get("nuTelefone", "")),
            "CEP": d.get("nuCep", ""),
            "ENDERECO": str(d.get("noLogradouro", "")).capitalize() + ", " + str(d.get("complemento","")).capitalize(),
            "BAIRRO": formata_bairro_e_cidade(d.get("noBairro","")),
            "CIDADE" : formata_bairro_e_cidade(d.get("municipio", "")),
            "UF": d.get("sguf", ""),
            "ATIVIDADE": str(d.get("atividade","")).capitalize(),
            "COD_SITUACAO_CADASTRAL": d.get("nuSituacaoCadastral", ""),
            "SITUACAO_CADASTRAL": d.get("situacao",""),
            "ID_PRESTADOR": d.get("id",""),
            "URL_DETALHES_PRESTADOR" : formata_url_prestador(d.get("id",""))
        })
    return base